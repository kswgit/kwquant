
const Interdate  = (_a, _b) =>{
    a = new Date(_a)
    b = new Date(_b)
    return Math.abs(b.getTime() - a.getTime()) / (1000 * 3600 * 24)
}

const INTERESTS = [
    -0.3,
    -0.295,
    -0.29,
    -0.285,
    -0.28,
    -0.275,
    -0.27,
    -0.265,
    -0.26,
    -0.255,
    -0.25,
    -0.245,
    -0.24,
    -0.235,
    -0.23,
    -0.225,
    -0.22,
    -0.215,
    -0.21,
    -0.205,
    -0.2,
    -0.195,
    -0.19,
    -0.185,
    -0.18,
    -0.175,
    -0.17,
    -0.165,
    -0.16,
    -0.155,
    -0.15,
    -0.145,
    -0.14,
    -0.135,
    -0.13,
    -0.125,
    -0.12,
    -0.115,
    -0.11,
    -0.105,
    -0.1,
    -0.095,
    -0.09,
    -0.085,
    -0.08,
    -0.075,
    -0.07,
    -0.065,
    -0.06,
    -0.055,
    -0.05,
    -0.045,
    -0.04,
    -0.035,
    -0.03,
    -0.025,
    -0.02,
    -0.015,
    -0.01,
    -0.005,
    0,
    0.005,
    0.01,
    0.015,
    0.02,
    0.025,
    0.03,
    0.035,
    0.04,
    0.045,
    0.05,
    0.055,
    0.06,
    0.065,
    0.07,
    0.075,
    0.08,
    0.085,
    0.09,
    0.095,
    0.1,
    0.105,
    0.11,
    0.115,
    0.12,
    0.125,
    0.13,
    0.135,
    0.14,
    0.145,
    0.15,
    0.155,
    0.16,
    0.165,
    0.17,
    0.175,
    0.18,
    0.185,
    0.19,
    0.195,
    0.2,
    0.205,
    0.21,
    0.215,
    0.22,
    0.225,
    0.23,
    0.235,
    0.24,
    0.245,
    0.25,
    0.255,
    0.26,
    0.265,
    0.27,
    0.275,
    0.28,
    0.285,
    0.29,
    0.295,
    0.3
]

const Arraysum = a => a.reduce((p, c) => p + c, 0)

const ExponentialDistribution = (lambda, x) => {
    if (x <= 0) { return 0; }
    return -Math.expm1(-lambda * x)
}

module.exports = {
    Interdate,
    Arraysum,
    ExponentialDistribution,
    INTERESTS,
}